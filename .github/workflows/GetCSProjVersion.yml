name: C# project version detection

on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
        description: "The repository to checkout."
      ref:
        required: true
        type: string
        description: "The ref to checkout."
      config-path:
        required: true
        type: string
        description: "The path to the csproj file to extract the version from."

    outputs:
      Version:
        description: "The version number."
        value: ${{ jobs.VersionDetect.outputs.Version }}
      Version-Major:
        description: "The major version number."
        value: ${{ jobs.VersionDetect.outputs.Version-Major }}
      Version-Minor:
        description: "The minor version number."
        value: ${{ jobs.VersionDetect.outputs.Version-Minor }}
      Version-Patch:
        description: "The patch version number."
        value: ${{ jobs.VersionDetect.outputs.Version-Patch }}

jobs:
  VersionDetect:
    name: C# project version detection
    runs-on: windows-latest

    outputs:
      Version: ${{ steps.project-version-string.outputs.Version }}
      Version-Major: ${{ steps.project-version-string.outputs.Version-Major }}
      Version-Minor: ${{ steps.project-version-string.outputs.Version-Minor }}
      Version-Patch: ${{ steps.project-version-string.outputs.Version-Patch }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: ${{inputs.repository}}
          ref: ${{inputs.ref}}

      - name: Get project version information
        id: project-versions
        run: |
          Select-String -Path "${{inputs.config-path}}" '<(?<TagName>\w*?Version)>(?<Major>\d+)(?:\.(?<Minor>\d+))(?:\.(?<Patch>\d+)|-(?<Quality>\w+)|\+(?<Tag>\w+))?(?:\.(?<Patch>\d+)|-(?<Quality>\w+)|\+(?<Tag>\w+))?(?:\.(?<Patch>\d+)|-(?<Quality>\w+)|\+(?<Tag>\w+))?</\w*?Version>' -AllMatches | Foreach-Object -Process {$_.Matches} | Foreach-Object -Process { $tagName = $_.Groups["TagName"].Value; $_.Groups | Where-Object { $_.Name -ne "0" -and $_.Name -ne "TagName"; } } | Foreach-Object -Process { $tagName + "_" + $_.Name + "=" + $_.Value >> $env:GITHUB_OUTPUT }

      - name: Set project version string
        id: project-version-string
        run: |
          echo 'Version=${{steps.project-versions.outputs.Version_Major}}.${{steps.project-versions.outputs.Version_Minor}}.${{steps.project-versions.outputs.Version_Patch}}' >> $env:GITHUB_OUTPUT
          echo 'Version-Major=${{steps.project-versions.outputs.Version_Major}}' >> $env:GITHUB_OUTPUT
          echo 'Version-Minor=${{steps.project-versions.outputs.Version_Minor}}' >> $env:GITHUB_OUTPUT
          echo 'Version-Patch=${{steps.project-versions.outputs.Version_Patch}}' >> $env:GITHUB_OUTPUT

      - name: Ensure we detected the version properly
        id: assert-version
        if: ${{ steps.project-version-string.outputs.Version == '..' }}
        run: exit 1
